package com.example.myapp

import android.os.Bundle
import android.content.pm.ActivityInfo
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT
        setContent {
            WomenDayApp()
        }
    }
}

@Composable
fun WomenDayApp() {
    var name by remember { mutableStateOf("") }
    var greeting by remember { mutableStateOf("") }
    var isDarkTheme by remember { mutableStateOf(false) }
    val backgroundColor = if (isDarkTheme) Color(0xFF121212) else Color(0xFFFFC0CB)
    val buttonColor = if (isDarkTheme) Color(0xFFBB86FC) else Color(0xFFE91E63)
    val textColor = if (isDarkTheme) Color.White else Color.Black

    val greetingsList = listOf(
        "–° 8 –º–∞—Ä—Ç–∞, %s! –ü—É—Å—Ç—å —Å—á–∞—Å—Ç—å–µ –∏ –ª—é–±–æ–≤—å –Ω–∞–ø–æ–ª–Ω—è—é—Ç –≤–∞—à –¥–µ–Ω—å!",
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, %s, —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º –≤–µ—Å–Ω—ã! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç —Ä–∞–¥–æ—Å—Ç–Ω—ã–º!",
        "–° 8 –º–∞—Ä—Ç–∞, %s! –ü—É—Å—Ç—å –º–µ—á—Ç—ã —Å–±—ã–≤–∞—é—Ç—Å—è, –∞ —É–ª—ã–±–∫–∏ –Ω–µ —Å—Ö–æ–¥—è—Ç —Å –ª–∏—Ü–∞!",
        "–° –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –∂–µ–Ω—Å–∫–∏–º –¥–Ω–µ–º, %s! –ë—É–¥—å—Ç–µ —Å—á–∞—Å—Ç–ª–∏–≤—ã –∏ –ª—é–±–∏–º—ã!",
        "–° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º, %s! –ü—É—Å—Ç—å –º–∏—Ä –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω —Ä–∞–¥–æ—Å—Ç–∏ –∏ –ª—é–±–≤–∏!",
        "–° 8 –º–∞—Ä—Ç–∞, %s! –ñ–µ–ª–∞–µ–º —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –≤–µ—Å–µ–Ω–Ω–µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!",
        "–° –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –∂–µ–Ω—Å–∫–∏–º –¥–Ω–µ–º, %s! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —Å—á–∞—Å—Ç—å–µ!",
        "–° 8 –º–∞—Ä—Ç–∞, %s! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω –ª—é–±–æ–≤—å—é –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å—é!",
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, %s, —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º! –ü—É—Å—Ç—å –≤—Å–µ –º–µ—á—Ç—ã —Å–±—ã–≤–∞—é—Ç—Å—è!",
        "–° 8 –º–∞—Ä—Ç–∞, %s! –ü—É—Å—Ç—å –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Ç–µ–ø–ª—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ —Ä–∞–¥–æ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π!"
    )

    val shownGreetings = remember { mutableStateListOf<String>() }

    fun getNextGreeting(): String {
        if (shownGreetings.size == greetingsList.size) {
            shownGreetings.clear()
        }
        val notShown = greetingsList.filter { it !in shownGreetings }
        val next = notShown.random()
        shownGreetings.add(next)
        return next
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(backgroundColor)
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = "üå∑ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å 8 –º–∞—Ä—Ç–∞ üå∑",
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            color = textColor,
            textAlign = TextAlign.Center,
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(16.dp))
        OutlinedTextField(
            value = name,
            onValueChange = { name = it },
            label = { Text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è") },
            modifier = Modifier.fillMaxWidth()
        )
        Spacer(modifier = Modifier.height(16.dp))
        Button(
            onClick = { greeting = "–° 8 –º–∞—Ä—Ç–∞, $name! –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è –∏ –ª—é–±–≤–∏!" },
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(containerColor = buttonColor),
            shape = RoundedCornerShape(24.dp)
        ) {
            Text("‚ú® –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ ‚ú®")
        }
        Spacer(modifier = Modifier.height(8.dp))
        Button(
            onClick = { greeting = getNextGreeting().format(name) },
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(containerColor = buttonColor),
            shape = RoundedCornerShape(24.dp)
        ) {
            Text("üéâ –°–ª—É—á–∞–π–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ üéâ")
        }
        Spacer(modifier = Modifier.height(8.dp))
        Button(
            onClick = { isDarkTheme = !isDarkTheme },
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(containerColor = buttonColor),
            shape = RoundedCornerShape(24.dp)
        ) {
            Text(if (isDarkTheme) "‚òÄÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É ‚òÄÔ∏è" else "üåô –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É üåô")
        }
        Spacer(modifier = Modifier.height(16.dp))
        if (greeting.isNotEmpty()) {
            Text(
                text = greeting,
                fontSize = 18.sp,
                color = textColor,
                textAlign = TextAlign.Center,
                modifier = Modifier.fillMaxWidth()
            )
        }
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewWomenDayApp() {
    WomenDayApp()
}
